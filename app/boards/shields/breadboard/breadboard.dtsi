#include <dt-bindings/zmk/matrix_transform.h>

#define L_DEF  0 // default layer
#define L_NAV  1 // navigation layer

/ {
  chosen {
    zmk,kscan = &kscan0;
    zmk,matrix_transform = &default_transform;
    zephyr,console = &cdc_acm_uart;            // this is to allow USB debugging when the CONFIG_ZMK_USB_LOGGING=y is set in yackboard-v1_right.conf
    zephyr,display = &nice_view;               // ??? experimental for the Nice!View
  };

  default_transform: keymap_transform_0 {
    compatible = "zmk,matrix-transform";
    columns = <4>;
    rows = <2>;

  // The following matrix transform describes the wiring of the breadboard cirquit.
  map = <
    RC(0,0) RC(0,1)    RC(0,3) RC(0,2)
    RC(1,0) RC(1,1)    RC(1,3) RC(1,2)
    >;
  };

  kscan0: kscan_0 {
    compatible = "zmk,kscan-gpio-matrix";
    label = "KSCAN";
    diode-direction = "row2col";

    row-gpios // The following are the rows of the matrix of the Yackboard (with diodes pointing from rows to columns)
      = <&pro_micro 18 GPIO_ACTIVE_HIGH>
      , <&pro_micro 19 GPIO_ACTIVE_HIGH>
      ;
  };
};

// The following is the device used for USB debugging.

&usbd {
  status = "okay";
  cdc_acm_uart: cdc_acm_uart {
    compatible = "zephyr,cdc-acm-uart";
    label = "CDC_ACM_0";
  };
};

// ??? The following is experimental for the Nice!View
// I took it from https://github.com/steffMorse/zmk-config-newage/blob/main/boards/shields/newage/newage.dtsi
// and just changed the CS pin from GPIO 0 to GPIO 1 (which is where I have it on the breadboard)

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels =
	        <NRF_PSEL(SPIM_SCK,  0, 20)>, // ProMicro GPIO 3 = Nice!Nano P0.20
                <NRF_PSEL(SPIM_MOSI, 0, 17)>, // ProMicro GPIO 2 = Nice!Nano P0.17
                <NRF_PSEL(SPIM_MISO, 0, 22)>; // ProMicro GPIO 4 = Nice!Nano P0.22
        };
    };
    spi0_sleep: spi0_sleep {
        group1 {
            psels =
	        <NRF_PSEL(SPIM_SCK,  0, 20)>, // ProMicro GPIO 3 = Nice!Nano P0.20
                <NRF_PSEL(SPIM_MOSI, 0, 17)>, // ProMicro GPIO 2 = Nice!Nano P0.17
                <NRF_PSEL(SPIM_MISO, 0, 22)>; // ProMicro GPIO 4 = Nice!Nano P0.22
            low-power-enable;
        };
    };
};

// The name 'nice_view_spi' is required for the 'nice_view' shield to find the SPI bus.
nice_view_spi: &spi0 {
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    cs-gpios = <&pro_micro 1 GPIO_ACTIVE_HIGH>, // ProMicro GPIO 1 = Nice!Nano P0.06
    	       <&pro_micro 0 GPIO_ACTIVE_LOW>;  // ProMicro GPIO 0 = Nice!Nano P0.08

    trackpad0: trackpad0@1 {
      compatible = "cirque,pinnacle";
      reg = <1>;                                    // index of the corresponding CS pin in the array cs-gpios
      spi-max-frequency = <1000000>;
      dr-gpios = <&pro_micro 5 (GPIO_ACTIVE_HIGH)>; // ProMicro GPIO 5 = Nice!Nano pin 0.24

      sensitivity = "2x";
      //sleep;
      //no-taps;
      // rotate-90;
    };
};

// The Nice!View is connected as follows:
//
// Nice!View --> Nice!Nano v2
//  1 CS     --> GPIO 1 = P0.06
//  2 GND    --> GND
//  3 VCC    --> 3V3
//  4 SCK    --> GPIO 3 = P0.20
//  5 MOSI   --> GPIO 2 = P0.17
//
// The Cirque Track Pad is connected as follows:
//
// Cirque  --> Nice!Nano v2
//  1 SCK  --> GPIO 3 = P0.20
//  2 MISO --> GPIO 4 = P0.22
//  3 SS   --> GPIO 0 = P0.08
//  4 DR   --> GPIO 5 = P0.24
//  5 MOSI --> GPIO 2 = P0.17
// 11 GND  --> GND
// 12 VCC  --> 3V3
//

/ {
    cirque_listener {
      compatible = "zmk,input-listener";
      device = <&trackpad0>;
      // xy-swap;
      y-invert;
      // x-invert;
      scale-multiplier = <2>;
    };
};
